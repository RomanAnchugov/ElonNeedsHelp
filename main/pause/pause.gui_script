local TAG = "pause.gui_script"
local gooey = require "gooey.gooey"
local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
local pause = false
require "main/varibles"

function home_pressed(button)
	msg.post("main:/initial#initial", "show_banner")
	monarch.show("menu_screen")
	if IS_SOUND then
		msg.post("main:/sound#click_sound", "play_sound")
	end
end

function home_update(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	end
end

function bonus_add_pressed(button)
	if IS_SOUND then
		msg.post("main:/sound#click_sound", "play_sound")
	end

	if admob.is_loaded('rewarded') then
		admob.show('rewarded')
	elseif admob.is_loaded('interstitial') then
		admob.show('interstitial')
		msg.post("game:/bonus_driver#bonus_driver", "ads_bonus")
	end
end

function bonus_add_update(button)
		if button.pressed_now then
			gui.play_flipbook(button.node, hash("custom_button_pressed"))
		elseif button.released_now then
			gui.play_flipbook(button.node, hash("custom_button_idle"))
		elseif not button.pressed and button.over_now then
			gui.play_flipbook(button.node, hash("custom_button_pressed"))
		elseif not button.pressed and button.out_now then
			gui.play_flipbook(button.node, hash("custom_button_idle"))
		end
end

function unpause_pressed(button)
	print(TAG, "pause_pressed")
	msg.post("game:/rocket#rocket", "unpause")
	monarch.back()
	if IS_SOUND then
		msg.post("main:/sound#back_sound", "stop_sound")
		msg.post("main:/sound#game_sound", "play_sound")
	end
end

function unpause_update(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	end
end

function init(self)
	gooey.acquire_input()

	self.transition1 = transitions.create(gui.get_node("bg"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.3, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.3, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.3, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.3, 0)

	self.transition2 = transitions.create(gui.get_node("unpause/bg"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.3, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.3, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0, 0)
end


function on_message(self, message_id, message, sender)
	self.transition1.handle(message_id, message, sender)
	self.transition2.handle(message_id, message, sender)
end

function on_input(self, action_id, action)
	gooey.button("home/bg", action_id, action, home_pressed, home_update)
	gooey.button("bonus_add/bg", action_id, action, bonus_add_pressed, bonus_add_update)
	gooey.button("unpause/bg", action_id, action, unpause_pressed, unpause_update)
end

function update(self, dt)
	if admob.is_loaded('rewarded') or admob.is_loaded('interstitial') then
		gui.set_color(gui.get_node("bonus_add/bg"), vmath.vector4(1, 1, 1, 1))
	else
		gui.set_color(gui.get_node("bonus_add/bg"), vmath.vector4(1, 1, 1, .5))
	end
end