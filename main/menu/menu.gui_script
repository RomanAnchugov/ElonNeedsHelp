require "main/varibles"
local TAG = "menu.gui_script: "

local random = require "main/random"
local gooey = require "gooey.gooey"
local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"

local header_timer = nil

local function start_pressed(button)
	monarch.show("game_screen")
	if IS_SOUND then
		msg.post("main:/sound#click_sound", "play_sound")
	end
end

local function shop_pressed(button)
	monarch.show("shop_screen")
	if IS_SOUND then
		msg.post("main:/sound#click_sound", "play_sound")
	end
end

local function start_update(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	end
end

local function shop_update(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	end
end

local function settings_pressed(button)
	if IS_SOUND then
		msg.post("main:/sound#click_sound", "play_sound")
	end
	monarch.show("settings_screen")
end

local function settings_update(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	end
end

local function leader_pressed(button)
	if IS_SOUND then
		msg.post("main:/sound#click_sound", "play_sound")
	end
end

local function leader_update(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	end
end

function init(self)
	gooey.acquire_input()
	
	self.transition1 = transitions.create(gui.get_node("start"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)

	self.transition2 = transitions.create(gui.get_node("menu_header"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_left, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_left, gui.EASING_INQUAD, 0.6, 0)

	self.transition3 = transitions.create(gui.get_node("shop"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_left, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_left, gui.EASING_INQUAD, 0.6, 0)

	self.transition4 = transitions.create(gui.get_node("money"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_left, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_left, gui.EASING_INQUAD, 0.6, 0)

	self.transition5 = transitions.create(gui.get_node("best_score"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_left, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_left, gui.EASING_INQUAD, 0.6, 0)

	self.transition6 = transitions.create(gui.get_node("settings/bg"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.scale_out, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)

	self.transition7 = transitions.create(gui.get_node("leader/bg"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.scale_out, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)

	self.money = gui.get_node("money")
	self.best = gui.get_node("best_score")
	gui.set_text(self.money, "money: " .. MONEY)
	gui.set_text(self.best, "best: " .. BEST_SCORE)


	local timer_flag = true
	local timer_duration = 1.5
	header_timer = timer.delay(timer_duration, true, function(self, handle, time_elapsed)
		local node = gui.get_node("menu_header")
		local color = vmath.vector4(random.random(1, 10) / 10, 
		random.random(1, 10) / 10, 
		random.random(1, 10) / 10, 
		1)
		gui.animate(node, "color", color, gui.EASING_LINEAR, timer_duration)

		if timer_flag then
			gui.animate(node, "scale", 1.1, gui.EASING_INOUTSINE, timer_duration)
			timer_flag = false
		else
			gui.animate(node, "scale", 1, gui.EASING_INOUTSINE, timer_duration)
			timer_flag = true
		end
	end)
end

function on_message(self, message_id, message, sender)
	self.transition1.handle(message_id, message, sender)
	self.transition2.handle(message_id, message, sender)
	self.transition3.handle(message_id, message, sender)
	self.transition4.handle(message_id, message, sender)
	self.transition5.handle(message_id, message, sender)
	self.transition6.handle(message_id, message, sender)
	self.transition7.handle(message_id, message, sender)
	
	if message_id == monarch.TRANSITION.DONE and message.transition == monarch.TRANSITION.SHOW_IN then
		
	end
end

function on_input(self, action_id, action)
	gooey.button("start_bg", action_id, action, start_pressed, start_update)
	gooey.button("shop_bg", action_id, action, shop_pressed, shop_update)
	gooey.button("settings/bg", action_id, action, settings_pressed, settings_update)
	gooey.button("leader/bg", action_id, action, leader_pressed, leader_update)
end

function final(self)
	timer.cancel(header_timer)
end