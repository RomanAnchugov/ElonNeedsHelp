--bg parralax control
local TAG = "bg.script: "

local click_count = 0
local control_count = 1 --number of clicks, when planet will create
local planets_count = 0

function init(self)
	msg.post(".", "acquire_input_focus")
	math.randomseed(os.clock()*100000000000)
	particlefx.play("/bg#stars")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("boost") then
		particlefx.play("/bg#bonus")
	end

	if message_id == hash("boost_end") then
		particlefx.stop("/bg#bonus")
	end

	if message_id == hash("decrease_planets") then
		planets_count = planets_count - 1
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		click_count = click_count + 1
		if click_count >= control_count then
			local scale = math.random(200, 400) / 1000
			
			--setup position
			local position
			if math.random(2) == 1 then
				position = vmath.vector3(math.random(5, 100), 1280, 0)
			else
				position = vmath.vector3(math.random(550, 650), 1280, 0)
			end

			--create new bg planet
			local piece
			if planets_count <= 2 then
				piece = factory.create("/bg#bg_factory", position, nil, nil, scale)
				msg.post("game:/gui#game", "increase_planets_count")
			end

			--opacity depends on scale
			local url = msg.url(piece)
			url.fragment = "sprite"
			sprite.set_constant(url, "tint", vmath.vector4(1, 1, 1, 1 - scale + 0.15))
			
			--number of clicks for creating new planet
			control_count = scale * 100 + 5
			if control_count < 17 then
				control_count = 17
			end

			click_count = 0
			
		end
	end	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
