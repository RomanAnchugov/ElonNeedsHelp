local TAG = "rocket_opening.gui_script"

require "main/varibles"
local gooey = require "gooey.gooey" 
local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
local flow = require "main/flow"
local random = require "main/random"

local opened = false

function generate_variant()
	local node = gui.get_node("variants")
	local number = random.random(1, 45)
	gui.play_flipbook(node, number .. "")
end

function init(self)
	gooey.acquire_input()
	if IS_SOUND then
		msg.post("main:/sound#back_sound", "stop_sound")
	end

	--OPENING
	local node = gui.get_node("count_down")
	flow.start(function()
		flow.delay(.5)
		gui.set_text(node, "5")
		if IS_SOUND then
			msg.post("main:/sound#roulete_sound", "play_sound")
		end
		flow.delay(1)
		gui.set_text(node, "4")
		flow.delay(1)
		gui.set_text(node, "3")
		flow.delay(1)
		gui.set_text(node, "2")
		flow.delay(1)
		gui.set_text(node, "1")
		flow.delay(1)
		gui.set_text(node, "0")
		gui.animate(node, "color", vmath.vector4(1, 1, 1, 0), gui.EASING_OUTEXPO, 1, 1)
		node = gui.get_node("rocket")

		--generating new random number for rocket
		local number = random.random(1, ROCKETS_SKIN_COUNT)
		local opened_rockets = ""
		for i = 1, table.maxn(OPENED_ROCKETS) do
			opened_rockets = opened_rockets .. OPENED_ROCKETS[i] .. " "
			if OPENED_ROCKETS[i] == number then
				i = 1
				number = random.random(1, ROCKETS_SKIN_COUNT)
			end
		end
		print(TAG, "already opened rockets: ", opened_rockets)
		print(TAG, "new opened rocket: ", number .. "")
		table.insert(OPENED_ROCKETS, number)
		gui.play_flipbook(node, "" .. number)
		opened = true
		msg.post("main:/initial#initial", "save")

		gui.animate(node, "scale", 1.75, gui.EASING_INOUTELASTIC, 1, .5)

		--fireworks and other particles
		flow.delay(.75)
		node = gui.get_node("particlefx1")
		if IS_SOUND then
			msg.post("main:/sound#yay_sound", "play_sound")
			msg.post("main:/sound#fireworks_sound", "play_sound")
		end
		gui.play_particlefx(node)
		flow.delay(.5)
		gui.play_particlefx(gui.get_node("particlefx2"))
		flow.delay(.2)
		gui.play_particlefx(gui.get_node("particlefx3"))
		flow.delay(.4)
		gui.play_particlefx(gui.get_node("particlefx4"))
		flow.delay(.2)
		gui.play_particlefx(gui.get_node("particlefx5"))
		gui.play_particlefx(gui.get_node("particlefx6"))
		flow.delay(.2)
		gui.play_particlefx(gui.get_node("shine"))
		if IS_SOUND then
			msg.post("main:/sound#bells_sound", "play_sound")
			msg.post("main:/sound#back_sound", "play_sound")
		end
	end)

	--SHOW DEMOS 
	flow.start(function()
		flow.delay(.5)
		for i = 1, 20 do
			generate_variant()
			flow.delay(.1)
		end
		for i = 1, 5 do
			generate_variant()
			flow.delay(.2)
		end
		for i = 1, 2 do
			generate_variant()
			flow.delay(.5)
		end
		flow.delay(1)
		local node = gui.get_node("variants")
		gui.set_enabled(node, false)
	end)

	self.transition1 = transitions.create(gui.get_node("count_down"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)

	self.transition2 = transitions.create(gui.get_node("rocket"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.fade_out, gui.EASING_INQUAD, 0.4, 0)
	.back_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.fade_out, gui.EASING_INQUAD, 0.4, 0)

	local node = gui.get_node("bg")
	local color = vmath.vector4(0, 0, 0, .5)
	gui.animate(node, "color", color, gui.EASING_INSINE, .5)

end

function update(self, dt)
	flow.update(dt)
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	self.transition1.handle(message_id, message, sender)
	self.transition2.handle(message_id, message, sender)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed and opened then
		local node = gui.get_node("bg")
		local color = vmath.vector4(0, 0, 0, 0)
		gui.animate(node, "color", color, gui.EASING_INSINE, .5)
		monarch.back()

		if IS_SOUND then
			msg.post("main:/sound#bells_sound", "stop_sound")
		end
	end
end

function final(self)
	flow.stop()
end