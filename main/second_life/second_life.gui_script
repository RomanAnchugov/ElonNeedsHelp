local TAG = "second_life.gui_script"
local gooey = require "gooey.gooey"
local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
require "main/varibles"

function no_pressed(button)
	msg.post("game:/gui#game", "save_result")
	monarch.show("menu_screen")
	if IS_SOUND then
		msg.post("main:/sound#click_sound", "play_sound")
	end
end

function no_update(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	end
end

function yes_pressed(button)
	monarch.back()
	msg.post("game:/bonus_driver#bonus_driver", "second_life")
	if IS_SOUND then
		msg.post("main:/sound#click_sound", "play_sound")
		msg.post("main:/sound#back_sound", "stop_sound")
		msg.post("main:/sound#game_sound", "play_sound")
	end
end

function yes_update(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	end
end

local function init_gui()
	local lang = sys.get_sys_info().language
	local node = gui.get_node("header")
	gui.set_text(node, second_life_text[lang])

	node = gui.get_node("yes/text")
	gui.set_text(node, yes_text[lang])

	node = gui.get_node("no/text")
	gui.set_text(node, no_text[lang])
end

function init(self)
	gooey.acquire_input()
	init_gui()

	self.transition1 = transitions.create(gui.get_node("bg"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.3, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.3, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.3, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.3, 0)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	self.transition1.handle(message_id, message, sender)
end

function on_input(self, action_id, action)
	gooey.button("no/bg", action_id, action, no_pressed, no_update)
	gooey.button("yes/bg", action_id, action, yes_pressed, yes_update)
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
