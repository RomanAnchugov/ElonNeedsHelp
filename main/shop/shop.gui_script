require "main/varibles"
local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local transitions = require "monarch.transitions.gui"
local kenneyblue = require "gametheme/kenneyblue"

local TAG = "shop.gui_script: "

function back_pressed(button)
	local node = gui.get_node("money")
	gui.animate(node, "scale", .4, gui.EASING_INSINE, .5)
	monarch.back()
end

function back_update(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("custom_button_pressed"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("custom_button_idle"))
	end
end

function update_list(list)
	print(TAG, "update list")
end

function update_gui()

	msg.post("main:/initial#initial", "save")
	
	--SET VALUES
	--MONEY PER CLICK
	local node = gui.get_node("list_item1/text")
	gui.set_text(node, "MONEY PER CLICK(" .. MONEY_PER_CLICK_COUNT .. ")")
	node = gui.get_node("list_item1/cost")
	gui.set_text(node, MONEY_PER_CLICK_COST .. "$")

	--SECOND LIFE
	node = gui.get_node("list_item2/text")
	gui.set_text(node, "SECOND LIFE(" .. SECOND_LIFE_COUNT .. ")")
	node = gui.get_node("list_item2/cost")
	gui.set_text(node, SECOND_LIFE_COST .. "$")

	--BOOST
	node = gui.get_node("list_item3/text")
	gui.set_text(node, "BOOSTS(" .. BOOST_COUNT .. ")")
	node = gui.get_node("list_item3/cost")
	gui.set_text(node, BOOST_COST .. "$")

	--AUTOPILOT
	node = gui.get_node("list_item4/text")
	gui.set_text(node, "AUTOPILOT(" .. AUTOPILOT_COUNT .. ")")
	node = gui.get_node("list_item4/cost")
	gui.set_text(node, AUTOPILOT_COST .. "$")

	--ENGINES
	node = gui.get_node("list_item5/text")
	gui.set_text(node, "ENGINES(" .. ENGINES_COUNT .. ")")
	node = gui.get_node("list_item5/cost")
	gui.set_text(node, ENGINES_COST .. "$")

	--ROCKETS
	node = gui.get_node("list_item6/text")
	gui.set_text(node, "ROCKETS(" .. ROCKETS_COUNT .. ")")
	node = gui.get_node("list_item6/cost")
	gui.set_text(node, ROCKETS_COST .. "$")

	--SET AVAILIBILITY	
	if MONEY < MONEY_PER_CLICK_COST then
		node = gui.get_node("list_item1/bg")
		gui.set_color(node, vmath.vector4(1, 1, 1, .5))
	end

	if MONEY < SECOND_LIFE_COST then
		node = gui.get_node("list_item2/bg")
		gui.set_color(node, vmath.vector4(1, 1, 1, .5))
	end

	if MONEY < BOOST_COST then
		node = gui.get_node("list_item3/bg")
		gui.set_color(node, vmath.vector4(1, 1, 1, .5))
	end

	if MONEY < AUTOPILOT_COST then
		node = gui.get_node("list_item4/bg")
		gui.set_color(node, vmath.vector4(1, 1, 1, .5))
	end

	if MONEY < ENGINES_COST then
		node = gui.get_node("list_item5/bg")
		gui.set_color(node, vmath.vector4(1, 1, 1, .5))
	end

	if MONEY < ROCKETS_COST then
		node = gui.get_node("list_item6/bg")
		gui.set_color(node, vmath.vector4(1, 1, 1, .5))
	end

	--MONEY SET
	node = gui.get_node("money")
	gui.set_text(node, "money: " .. MONEY)
	if gui.get_scale(node) ~= .8 then 
		gui.animate(node, "scale", .8, gui.EASING_INSINE, .5)
		local color = vmath.vector4(.8, 1, 1, 1)
		gui.animate(node, "color", color, gui.EASING_INSINE, .4)
	end
end


function init(self)
	gooey.acquire_input()
	self.list_ids = {"list_divider1/bg", "list_item1/bg", "list_item2/bg", "list_item3/bg", 
	"list_item4/bg", "list_divider2/bg", "list_item5/bg", "list_item6/bg", "list_divider3/bg"}

	self.transition1 = transitions.create(gui.get_node("header"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)

	self.transition2 = transitions.create(gui.get_node("static_list/bg"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)

	self.transition3 = transitions.create(gui.get_node("back/bg"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)
	
	kenneyblue.static_list("static_list", self.list_ids)
	update_gui()
end

function on_message(self, message_id, message, sender)
	self.transition1.handle(message_id, message, sender)
	self.transition2.handle(message_id, message, sender)
	self.transition3.handle(message_id, message, sender)

	if message_id == monarch.TRANSITION.DONE and message.transition == monarch.TRANSITION.SHOW_IN then
		print(TAG, "shop shown")
	end
end

function on_input(self, action_id, action)
	kenneyblue.static_list("static_list", self.list_ids, action_id, action, 
		function(list) --on item of list selected
			if list.selected_item == 2 and MONEY >= MONEY_PER_CLICK_COST then --money per click (list_item1)
				print(TAG, "money per click")
				MONEY = MONEY - MONEY_PER_CLICK_COST
				MONEY_PER_CLICK_COUNT = MONEY_PER_CLICK_COUNT + 1
				MONEY_PER_CLICK_COST = math.floor(MONEY_PER_CLICK_COST * 1.5)
			elseif list.selected_item == 3 and MONEY >= SECOND_LIFE_COST then --second life
				print(TAG, "second life")
				MONEY = MONEY - SECOND_LIFE_COST
				SECOND_LIFE_COUNT = SECOND_LIFE_COUNT + 1
				SECOND_LIFE_COST = math.floor(SECOND_LIFE_COST * 1.5)
			elseif list.selected_item == 4 and MONEY >= BOOST_COST then --boost
				print(TAG, "boost")
				MONEY = MONEY - BOOST_COST
				BOOST_COUNT = BOOST_COUNT + 1
				BOOST_COST = math.floor(BOOST_COST * 1.5)
			elseif list.selected_item == 5 and MONEY >= AUTOPILOT_COST then --autopilot
				print(TAG, "autopilot")
				MONEY = MONEY - AUTOPILOT_COST
				AUTOPILOT_COUNT = AUTOPILOT_COUNT + 1
				AUTOPILOT_COST = math.floor(AUTOPILOT_COST * 1.5)
			elseif list.selected_item == 7 and MONEY >= ENGINES_COST then --engines
				print(TAG, "engines")				
				MONEY = MONEY - ENGINES_COST
				ENGINES_COUNT = ENGINES_COUNT + 1
				ENGINES_COST = math.floor(ENGINES_COST * 1.5)
			elseif list.selected_item == 8 and MONEY >= ROCKETS_COST then --rockets
				print(TAG, "rockets")
				local position = vmath.vector3(1000, 840, 0)
				local node = gui.get_node("money")
				gui.animate(node, "position", position, gui.EASING_INSINE, .5)
				monarch.show("rocket_opening_screen")
			end
			update_gui()
		end)
	
	gooey.button("back/bg", action_id, action, back_pressed, back_update)
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
