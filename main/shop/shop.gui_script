require "main/varibles"
local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local transitions = require "monarch.transitions.gui"
local kenneyblue = require "gooey.themes.kenneyblue.kenneyblue"

local money_per_click_count = 0
local secodn_life_count = 0
local rockets_count = 0
local engines_count = 0
local boost_count = 0
local autopilot_count = 0

local money_per_click_cost = 100
local second_life_cost = 100
local rockets_cost = 100
local engines_cost = 100
local boost_cost = 100
local autopilot_cost = 100

local TAG = "shop.gui_script: "

function back_pressed(button)
	monarch.back()
end

function back_update(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("blue_button03"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("blue_button00"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("blue_button02"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("blue_button00"))
	end
end

function update_list(list)
	print(TAG, "update list")
end


function init(self)
	gooey.acquire_input()
	self.list_ids = {"list_item1/bg", "list_item2/bg", "list_item3/bg", 
	"list_item4/bg", "list_item5/bg", "list_item6/bg"}

	self.transition1 = transitions.create(gui.get_node("header"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)

	self.transition2 = transitions.create(gui.get_node("static_list/bg"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)

	self.transition3 = transitions.create(gui.get_node("back/bg"))
	.show_in(transitions.scale_in, gui.EASING_OUTQUAD, 0.6, 0)
	.show_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)
	.back_in(transitions.slide_in_left, gui.EASING_OUTQUAD, 0.6, 0)
	.back_out(transitions.slide_out_right, gui.EASING_INQUAD, 0.6, 0)
	
	kenneyblue.static_list("static_list", self.list_ids)
	kenneyblue.button("back", action_id, action, fn)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	self.transition1.handle(message_id, message, sender)
	self.transition2.handle(message_id, message, sender)
	self.transition3.handle(message_id, message, sender)
end

function on_input(self, action_id, action)
	kenneyblue.static_list("static_list", self.list_ids, action_id, action, 
		function(list) --on item of list selected
			if list.selected_item == 1 then --money per click (list_item1)
				print(TAG, "money per click")
				money_per_click_count = money_per_click_count + 1
				money_per_click_cost = money_per_click_cost * 1.5
				MONEY_PER_CLICK_COUNT = money_per_click_count
				MONEY_PER_CLICK_COST = money_per_click_cost

				--change count
				local node = gui.get_node("list_item1/text")
				gui.set_text(node, "MONEY PER CLICK(" .. money_per_click_count .. ")")

				--change cost
				node = gui.get_node("list_item1/cost")
				gui.set_text(node, money_per_click_cost .. "$")
			elseif list.selected_item == 2 then --second life
				print(TAG, "second life")
				secodn_life_count = secodn_life_count + 1
				second_life_cost = second_life_cost * 1.5

				local node = gui.get_node("list_item2/text")
				gui.set_text(node, "SECOND LIFE(" .. secodn_life_count .. ")")

				node = gui.get_node("list_item2/cost")
				gui.set_text(node, second_life_cost .. "$")
			elseif list.selected_item == 3 then --boost
				print(TAG, "boost")
				boost_count = boost_count + 1
				boost_cost = boost_cost * 1.5

				local node = gui.get_node("list_item3/text")
				gui.set_text(node, "BOOSTS(" .. boost_count .. ")")

				node = gui.get_node("list_item3/cost")
				gui.set_text(node, boost_cost .. "$")
			elseif list.selected_item == 4 then --autopilot
				print(TAG, "autopilot")
				autopilot_count = autopilot_count + 1
				autopilot_cost = autopilot_cost * 1.5

				local node = gui.get_node("list_item4/text")
				gui.set_text(node, "AUTOPILOT(" .. autopilot_count .. ")")

				node = gui.get_node("list_item4/cost")
				gui.set_text(node, autopilot_cost .. "$")
			elseif list.selected_item == 5 then --engines
				print(TAG, "engines")
				engines_count = engines_count + 1
				engines_cost = engines_cost * 1.5

				local node = gui.get_node("list_item5/text")
				gui.set_text(node, "ENGINES(" .. engines_count .. ")")

				node = gui.get_node("list_item5/cost")
				gui.set_text(node, engines_cost .. "$")
			elseif list.selected_item == 6 then --rockets
				print(TAG, "rockets")
				rockets_count = rockets_count + 1
				rockets_cost = rockets_cost * 1.5

				local node = gui.get_node("list_item6/text")
				gui.set_text(node, "ROCKETS(" .. rockets_count .. ")")

				node = gui.get_node("list_item6/cost")
				gui.set_text(node, rockets_cost .. "$")
			end
		end)
	
	gooey.button("back/bg", action_id, action, back_pressed, back_update)
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
